# # Stage 1: Build stage
# # Use a slim Node.js image for a smaller footprint
# FROM node:current-slim AS builder

# # Set the working directory in the container
# WORKDIR /app

# # Copy package.json and package-lock.json to leverage Docker cache
# # This is efficient for rebuilding images when dependencies have not changed
# COPY ./package.json ./package-lock.json ./

# # Use npm install to install dependencies
# RUN npm install

# # Copy the rest of the application code
# COPY . .

# # Stage 2: Run stage
# # Again, using a slim Node.js image for runtime to reduce image size
# FROM node:current-slim

# # Set the working directory in the container
# WORKDIR /app

# # Copy built artifacts from the builder stage
# COPY --from=builder /app ./

# # Inform Docker that the container listens on port 3000 at runtime
# EXPOSE 3000

# # Command to run the application
# CMD ["npm", "run", "dev", "--", "--host", "0.0.0.0", "--port", "3000"]

# Stage 1: Build the React app
FROM node:18 AS builder

# Set the working directory to /app
WORKDIR /app

# Copy the package.json and package-lock.json files to the working directory
COPY package.json package-lock.json ./

# Install the dependencies
RUN npm install

# Copy the rest of the application code to the working directory
COPY . .

# Build the app for production
RUN npm run build

# Stage 2: Serve the React app with Nginx
FROM nginx:alpine

# Copy the build output to the Nginx html directory
COPY --from=0 /app/dist /usr/share/nginx/html

# Expose the port that the app runs on
EXPOSE 5173

# Run Nginx
CMD ["nginx", "-g", "daemon off;"]